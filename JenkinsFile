
import jenkins.model.Jenkins
pipeline{
    agent any
    stages{
        stage("Environment Set Up "){
            steps{
                echo "========Installing Dependencies ========"
                bat "npm install"
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        stage("Specification testing"){
            steps{
                echo "========Specification testing========"
                //bat "npx swagger-diff ./API/swagger.1.yaml ./API/swagger.yaml"
                script {
                    println "ok"
                   // def lastSuccess = currentBuild.getProject().getLastSuccessfulBuild().getNumber() ;
                   // echo lastSuccess;
                   
                    /*This script shows how to get basic information about a job and its builds*/

                    name = "test_master_builder_project"
                    //If we want to add more then one job
                    def items = new LinkedHashSet();
                    def job = Hudson.instance.getJob(name)
                    items.add(job);
                    items.each { item ->
                        try {
                            def job_data = Jenkins.instance.getItemByFullName(item.fullName)
                            println 'Job: ' + item.fullName
                            if (job_data.getLastBuild()) {
                                last_job_num = job_data.getLastBuild().getNumber()
                                def upStreamBuild = Jenkins.getInstance().getItemByFullName(item.fullName).getBuildByNumber(last_job_num)
                    println 'LastBuildNumer: ' + last_job_num
                                println "LastBuildTime: ${upStreamBuild.getTime()}"
                            } else {
                                println 'LastBuildNumer: Null'
                            }
                        } catch (Exception e) {
                            println ' Ignoring exception ' + e
                        }
                    }
                }

            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                    
                    archiveArtifacts artifacts: 'API/swagger.yaml', fingerprint: true
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }        
        stage("Application Building"){
            steps{
                echo "========executing A========"
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
         stage("E2E"){
            steps{
                echo "========executing A========"
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }       
         stage("Report"){
            steps{
                echo "========executing A========"
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }  
        
    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}